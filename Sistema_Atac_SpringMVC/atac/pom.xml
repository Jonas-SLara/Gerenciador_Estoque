<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.atac</groupId>
	<artifactId>atac</artifactId>

	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>atac</name>
	<description>Projeto de gerenciamento de estoque e de funcionários em Spring Boot</description>

	<url/>
	
	<licenses>
		<license/>
	</licenses>

	<developers>
		<developer/>
	</developers>

	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>

	<properties>
		<java.version>21</java.version>
	</properties>

	<dependencies>

		<!-- Inclui tudo para desenvolvimento web com Spring Boot: Spring MVC (anotações como @Controller)
			Jackson (JSON <-> objetos Java) Validação (@Valid) Suporte a servlets, filtros e controller -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Facilita o desenvolvimento com: Hot reload (reinicia a aplicação automaticamente ao salvar
		 arquivos). Desabilita cache de templates (útil para desenvolvimento com JSP ou Thymeleaf)-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<!--Driver JDBC do PostgreSQL. Essencial para conectar ao banco de dados via JDBC.-->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.7.3</version>
		</dependency>

		<!-- Inclui o Tomcat como dependência externa, ideal para empacotar como WAR e rodar em um Tomcat
		separado. A anotação <scope>provided</scope> significa: "não embuta no .war, pois o
		servidor já tem isso".-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>

		<!--Inclui bibliotecas de testes JUnit 5, AssertJ, Mockito, etc-->
		<!--
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		-->

		<!--JSP Engine (necessário para processar .jsp-->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

		<!--JSTL (Taglib do JSTL padrão)-->
		<dependency>
			<groupId>jakarta.servlet.jsp.jstl</groupId>
			<artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
			<version>3.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>jakarta.servlet.jsp.jstl</artifactId>
			<version>3.0.1</version>
		</dependency>
		
		<!--Servlet API-->
		<dependency>
			<groupId>jakarta.servlet</groupId>
			<artifactId>jakarta.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>

	</dependencies>

	<build>
		<plugins>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

		</plugins>
	</build>

</project>
